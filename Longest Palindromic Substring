class Solution {
public:
    string longestPalindrome(string s) {
        if(s.length()<1)return "";
        int start=0,end=0;
        for(int i=0;i<s.length();i++)
        {
            int len1=expand_from_middle(s,i,i);
            int len2=expand_from_middle(s,i,i+1);
            //cout<<len1<<" L L "<<len2<<endl;
            int len=max(len1,len2);
            if(len>end-start)
            {
               //mid=(start+end)/2;
               start=i-((len-1)/2);
               end=i+(len/2);
            }
            
            
        }
        //end=max(1,end);
        //string ans;
        int length=end-start+1;
        // cout<<start<<" "<<end;
        return s.substr(start,length);
        // for(int i=start;i<=end;i++)
        // {
        //     ans=ans+s[i];
        // }
        // return ans;
    }
    int expand_from_middle(string s, int left, int right)
    {
        if(left>right) return 0;
        while(left>=0 && right<s.length() && s[left]==s[right])
        {
            left--;
            right++;
        }
        return right-left-1;
    }
};
